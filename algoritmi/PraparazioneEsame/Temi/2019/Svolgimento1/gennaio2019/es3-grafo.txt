1 - Il gioco può essere formalizzato attraverso un grafo pesato orientato in cui ogni nodo corrisponde ad una casella e i gli archi corrispondono agli spostamenti che si effettuano a seguito di un lancio di dadi.
Il grafo è connesso, ma non fortemente e in particolare ogni nodo rappresentante la casella n ha un arco uscente verso i nodi dalla casella n+1 a n+6, ad eccezione di caselle che non esistono nel grafo perchè
nel gioco rimandano direttamente ad un'altra casella perchè collegate tramite un serpente ed una scala. Inoltre, tutti i nodi che seguendo questa logica sarebbero > 30 sono rappresentati da un unico nodo che
rappresenta lo stato di sconfitta.

2 - 
a) cammino minimo dal nodo 1 al nodo 30 (considerando ogni nodo avente lo stesso peso)

Algoritmo di Dijkstra dal nodo 1 -> d[V]

SOLUZIONE: d[30];


b) 

nodo N = 1;
listaInteri lanci = vuota;

WHILE N != 30{
    for i from 1 to 6{
        M = Nodo per arco uscente da N con peso i;
        if M > N{
            N = M;
            lanci.addNode(i);
            break;
        }
    }
}

printList(lanci)

3 -
a) cammino minimo dal nodo n al nodo 30 (considerando ogni nodo avente lo stesso peso)

Algoritmo di Dijkstra dal nodo n -> d[V]

SOLUZIONE: d[30];


b)
nodo N = n;

listaInteri lanci = vuota;

WHILE N != 30{
    for i from 1 to 6{
        M = Nodo per arco uscente da N con peso i;
        if M > N{
            N = M;
            lanci.addNode(i);
            break;
        }
    }
}


4 -
a)  int N = 30;

    int L = (N - 1)/6

    L%6 == 0 ? return L : return L + 1;



b)  int N = 30;

    for i from 0 to N - 1{
        print(1);
    }
